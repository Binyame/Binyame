{"ast":null,"code":"var _jsxFileName = \"/Users/humanstown/Desktop/classes/Class Materials/Apple website/apple-react-state-api/src/Components/Main/Rating/Rating.js\";\nimport React, { Component } from \"react\";\n\nclass Rating extends Component {\n  constructor() {\n    super();\n\n    this.increment = () => {\n      // This works, but it is prone to error\n      // During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n      // To check that this one fails, lets write something that should be dependent on the updated value \n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n      // this.setState({\n      //   value: this.state.value - 1\n      // });\n      // If we use an updater function to pass the current state instead, it will work\n      // this.setState((prevState) => {\n      //   return {\n      //     value: prevState.value + 1,\n      //   };\n      // });\n      // this.setState((state) => {\n      //   return {\n      //     value: state.value - 2,\n      //   };\n      // });\n      // For the purpose of our example, lets just make the increment function arr the rating by one \n      this.setState(state => {\n        return {\n          value: state.value + 1\n        };\n      });\n    };\n\n    this.decrement = () => {\n      // The same thing for our decrement function \n      // Lets make it so that it decreases the rating by 1 \n      this.setState(state => {\n        return {\n          value: state.value - 1\n        };\n      });\n    };\n\n    this.state = {\n      value: 5\n    };\n  } // Not that we are using an arrow function in here\n  // If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \n\n\n  render() {\n    // Conditional rendering in React \n    let initialText = \"Average rating:\";\n    let changedText = \"You rated this product:\";\n    let displayText = \"\";\n    let counter = 0;\n\n    if (this.state.value == 5) {\n      counter = 0;\n      displayText = initialText;\n    } else {\n      counter = counter + 1;\n      displayText = changedText;\n    }\n\n    if (conter > 0) {\n      displayText = changedText;\n    } else {\n      displayText = initialText;\n    }\n\n    return React.createElement(\"div\", {\n      className: \"rating-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Please rate this mac out of 10\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"postive\",\n      onClick: this.increment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \" Rate up \"), React.createElement(\"button\", {\n      className: \"negative\",\n      onClick: this.decrement,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \" Rate down \"), React.createElement(\"div\", {\n      className: \"rating-result\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \" \", displayText, \" \", this.state.value)));\n  }\n\n}\n\nexport default Rating;","map":{"version":3,"sources":["/Users/humanstown/Desktop/classes/Class Materials/Apple website/apple-react-state-api/src/Components/Main/Rating/Rating.js"],"names":["React","Component","Rating","constructor","increment","setState","state","value","decrement","render","initialText","changedText","displayText","counter","conter"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAE7BE,EAAAA,WAAW,GAAE;AACX;;AADW,SAUbC,SAVa,GAUD,MAAM;AAChB;AACA;AAEE;AACA;AACA;AAGF;AAEE;AACA;AACA;AAEA;AACA;AACA;AAEF;AAEE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEF;AACE,WAAKC,QAAL,CAAeC,KAAD,IAAW;AACvB,eAAO;AACLC,UAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AADhB,SAAP;AAGD,OAJD;AAKH,KAjDY;;AAAA,SAkDbC,SAlDa,GAkDD,MAAM;AAEhB;AACA;AACA,WAAKH,QAAL,CAAeC,KAAD,IAAW;AACvB,eAAO;AACLC,UAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AADhB,SAAP;AAGD,OAJD;AAKD,KA3DY;;AAEV,SAAKD,KAAL,GAAa;AACZC,MAAAA,KAAK,EAAE;AADK,KAAb;AAGF,GAP4B,CAS7B;AACA;;;AAqDAE,EAAAA,MAAM,GAAG;AACP;AACA,QAAIC,WAAW,GAAG,iBAAlB;AACA,QAAIC,WAAW,GAAG,yBAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;AAEA,QAAIC,OAAO,GAAG,CAAd;;AAEA,QAAG,KAAKP,KAAL,CAAWC,KAAX,IAAoB,CAAvB,EAAyB;AACvBM,MAAAA,OAAO,GAAG,CAAV;AACAD,MAAAA,WAAW,GAAGF,WAAd;AACD,KAHD,MAGK;AACHG,MAAAA,OAAO,GAAGA,OAAO,GAAG,CAApB;AACAD,MAAAA,WAAW,GAAGD,WAAd;AACD;;AAED,QAAGG,MAAM,GAAG,CAAZ,EAAc;AACZF,MAAAA,WAAW,GAAGD,WAAd;AACD,KAFD,MAEK;AACHC,MAAAA,WAAW,GAAGF,WAAd;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAE,KAAKN,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAQ,MAAA,SAAS,EAAC,UAAlB;AAA6B,MAAA,OAAO,EAAE,KAAKI,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAiCI,WAAjC,OAA+C,KAAKN,KAAL,CAAWC,KAA1D,CAHF,CAFF,CADF;AAUD;;AA9F4B;;AAiG/B,eAAeL,MAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Rating extends Component {\n\n  constructor(){\n    super();\n     this.state = {\n      value: 5,\n    };   \n  }\n\n  // Not that we are using an arrow function in here\n  // If we just use the standard function, we will need to bind the finction inside our constructor. The arrow function does the binding for us automatically \n\n  increment = () => {\n    // This works, but it is prone to error\n    // During times where React doesn't imidiatelly accept the request of this function, it wouldn't work  \n    \n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n\n\n    // To check that this one fails, lets write something that should be dependent on the updated value \n\n      // this.setState({\n      //   value: this.state.value + 1\n      // });\n\n      // this.setState({\n      //   value: this.state.value - 1\n      // });\n\n    // If we use an updater function to pass the current state instead, it will work\n\n      // this.setState((prevState) => {\n      //   return {\n      //     value: prevState.value + 1,\n      //   };\n      // });\n\n      // this.setState((state) => {\n      //   return {\n      //     value: state.value - 2,\n      //   };\n      // });\n\n    // For the purpose of our example, lets just make the increment function arr the rating by one \n      this.setState((state) => {\n        return {\n          value: state.value + 1,\n        };\n      });\n  };\n  decrement = () => {\n\n    // The same thing for our decrement function \n    // Lets make it so that it decreases the rating by 1 \n    this.setState((state) => {\n      return {\n        value: state.value - 1,\n      };\n    });\n  };\n\n  render() {\n    // Conditional rendering in React \n    let initialText = \"Average rating:\";\n    let changedText = \"You rated this product:\"\n    let displayText = \"\"; \n\n    let counter = 0; \n\n    if(this.state.value == 5){\n      counter = 0;\n      displayText = initialText; \n    }else{\n      counter = counter + 1; \n      displayText = changedText; \n    }\n\n    if(conter > 0){\n      displayText = changedText;\n    }else{\n      displayText = initialText; \n    }\n    return (\n      <div className=\"rating-wrapper\">\n        <h3>Please rate this mac out of 10</h3> \n        <div>\n          <button className=\"postive\" onClick={this.increment}> Rate up </button>\n          <button className=\"negative\" onClick={this.decrement}> Rate down </button>\n          <div className=\"rating-result\"> {displayText} {this.state.value}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Rating;"]},"metadata":{},"sourceType":"module"}